#!/bin/bash
set -e

# System setup Ubuntu 20.04
sudo apt update && sudo apt upgrade -y
sudo apt install -y docker.io curl
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker $USER

# Install Docker Compose (versão compatível)
sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Configure swap (2GB para 1GB RAM)
sudo fallocate -l 2G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

##################################################################

# Criar diretório
mkdir -p ~/n8n && cd ~/n8n

# Criar os arquivos acima
nano .env

POSTGRES_USER=n8n
POSTGRES_PASSWORD=n8n_secure_password_123
POSTGRES_DB=n8n
DB_TYPE=postgresdb
DB_POSTGRESDB_DATABASE=n8n
DB_POSTGRESDB_HOST=postgres
DB_POSTGRESDB_PORT=5432
DB_POSTGRESDB_USER=n8n
DB_POSTGRESDB_PASSWORD=n8n_secure_password_123
DB_POSTGRESDB_SCHEMA=public
GENERIC_TIMEZONE=America/Sao_Paulo
TZ=America/Sao_Paulo
N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
N8N_RUNNERS_ENABLED=true
N8N_SECURE_COOKIE=false
N8N_HOST=0.0.0.0

nano docker-compose.yml

version: '3.8'
volumes:
  db_storage:
  n8n_storage:
services:
  postgres:
    image: postgres:17
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - db_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    environment:
      - DB_TYPE
      - DB_POSTGRESDB_DATABASE
      - DB_POSTGRESDB_HOST
      - DB_POSTGRESDB_PORT
      - DB_POSTGRESDB_USER
      - DB_POSTGRESDB_PASSWORD
      - GENERIC_TIMEZONE
      - N8N_SECURE_COOKIE
      - N8N_HOST
    ports:
      - 5678:5678
    links:
      - postgres
    volumes:
      - n8n_storage:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy

# Iniciar
docker-compose up -d

# Verificar status
docker-compose ps

##################################################################

# Criar diretório
mkdir -p ~/evolution && cd ~/evolution

# Criar os arquivos acima
nano .env

AUTHENTICATION_API_KEY=MINHA_CHAVE_SUPER_SECRETA_123
TZ=America/Sao_Paulo
DATABASE_ENABLED=true
DATABASE_PROVIDER=postgresql
DATABASE_CONNECTION_URI=postgresql://n8n:n8n_secure_password_123@postgres:5432/evolution_db
CACHE_REDIS_ENABLED=true
CACHE_REDIS_URI=redis://redis:6379/1
CACHE_REDIS_PREFIX_KEY=evolution
AUTHENTICATION_API_KEY=MINHA_CHAVE_SUPER_SECRETA_123

nano docker-compose.yml

version: '3.9'
services:
  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api:v2.1.1
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - evolution_instances:/evolution/instances
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: n8n_secure_password_123
      POSTGRES_DB: evolution_db
    volumes:
      - evolution_db_storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U n8n -d evolution_db"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    restart: always
    volumes:
      - redis_data:/data

volumes:
  evolution_instances:
  evolution_db_storage:
  redis_data:

# Iniciar
docker-compose up -d

# Verificar status
docker-compose ps